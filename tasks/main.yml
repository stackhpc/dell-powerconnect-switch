---
# Need to use pip since the CentOS provided package is too old for Ansible.
- name: Ensure the pexpect Python package is installed
  delegate_to: localhost
  ansible.builtin.pip:
    name: pexpect
    state: present
  become: true

- name: Ensure global switch configuration is applied
  delegate_to: localhost
  ansible.builtin.expect:
    command: "ssh {{ ansible_ssh_common_args | default }} {{ dell_powerconnect_switch_provider.username }}@{{ dell_powerconnect_switch_provider.host }}"
    responses: >-
      {{ dell_powerconnect_auth_responses |
         combine(enable_responses) |
         combine(main_responses) |
         combine(config_responses) }}
  register: result
  failed_when: >-
    result.get('rc') != 255 or
    '% Unrecognized command' in result.stdout_lines or
    "% Invalid input detected at '^' marker." in result.stdout_lines or
    "% missing mandatory parameter" in result.stdout_lines or
    "% bad parameter value" in result.stdout_lines or
    'Connection to ' ~ dell_powerconnect_switch_provider.host ~ ' closed.' not in result.stdout_lines[-1]
  vars:
    enable_responses: "{{ {dell_powerconnect_enable_prompt: ['enable', 'exit']} }}"
    main_responses: "{{ {dell_powerconnect_main_prompt: ['configure', 'exit']} }}"
    config_responses: "{{ {dell_powerconnect_config_prompt: dell_powerconnect_switch_config + ['exit']} }}"

- name: Ensure switch interface configuration is applied
  delegate_to: localhost
  ansible.builtin.expect:
    command: "ssh {{ ansible_ssh_common_args | default }} {{ dell_powerconnect_switch_provider.username }}@{{ dell_powerconnect_switch_provider.host }}"
    responses: >-
      {{ dell_powerconnect_auth_responses |
         combine(enable_responses) |
         combine(main_responses) |
         combine(config_responses) |
         combine(interface_responses) }}
  register: result
  failed_when: >-
    result.get('rc') != 255 or
    "% Invalid input detected at '^' marker." in result.stdout_lines or
    '% Unrecognized command' in result.stdout_lines or
    "% missing mandatory parameter" in result.stdout_lines or
    "% bad parameter value" in result.stdout_lines or
    'Connection to ' ~ dell_powerconnect_switch_provider.host ~ ' closed.' not in result.stdout_lines[-1]
  with_dict: "{{ dell_powerconnect_switch_interface_config }}"
  vars:
    enable_responses: "{{ {dell_powerconnect_enable_prompt: ['enable', 'exit']} }}"
    main_responses: "{{ {dell_powerconnect_main_prompt: ['configure', 'exit']} }}"
    config_responses: "{{ {dell_powerconnect_config_prompt: ['interface ' ~ item.key, 'exit']} }}"
    # Long config lines seem to confuse expect, so we add two exits.
    interface_responses: >-
      {{ {dell_powerconnect_interface_prompt:
          (['description ' ~ item.value.description] if 'description' in item.value else []) +
          (['name ' ~ item.value.name] if 'name' in item.value else []) +
          item.value.config | default([]) +
          ['exit', 'exit']} }}
  loop_control:
    label: |
      "{'interface': '{{ item.key }}',
      'description': '{{ item.value.description | default('<none>') }}',
      'name': '{{ item.value.name | default('<none>') }}',
      'config': '{{ item.value.config | default([]) }}'}"
- name: Write running configuration to startup configuration
  delegate_to: localhost
  ansible.builtin.expect:
    command: "ssh {{ ansible_ssh_common_args | default }} {{ dell_powerconnect_switch_provider.username }}@{{ dell_powerconnect_switch_provider.host }}"
    responses: >-
      {{ dell_powerconnect_auth_responses |
         combine(dell_powerconnect_write_responses) |
         combine(enable_responses) |
         combine(main_responses) }}
  register: result
  failed_when: >-
    result.get('rc') != 255 or
    '% Unrecognized command' in result.stdout_lines or
    "% Invalid input detected at '^' marker." in result.stdout_lines or
    "% missing mandatory parameter" in result.stdout_lines or
    "% bad parameter value" in result.stdout_lines or
    'Connection to ' ~ dell_powerconnect_switch_provider.host ~ ' closed.' not in result.stdout_lines[-1]
  vars:
    enable_responses: "{{ {dell_powerconnect_enable_prompt: ['enable', 'exit']} }}"
    main_responses: "{{ {dell_powerconnect_main_prompt: [dell_powerconnect_switch_write_command, 'exit']} }}"
  when: dell_powerconnect_switch_write_memory | bool
